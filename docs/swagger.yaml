basePath: /api/v1
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  jwt.NumericDate:
    properties:
      time.Time:
        type: string
    type: object
  models.File:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      filename:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      uri:
        type: string
      userid:
        type: integer
    type: object
  models.PersonalInformation:
    properties:
      age:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      sex:
        type: integer
      updatedAt:
        type: string
      userid:
        type: integer
    type: object
  models.User:
    properties:
      account:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      files:
        items:
          $ref: '#/definitions/models.File'
        type: array
      id:
        type: integer
      password:
        type: string
      personal_information:
        $ref: '#/definitions/models.PersonalInformation'
      updatedAt:
        type: string
      username:
        type: string
    required:
    - account
    - password
    type: object
  v1.CustomClaims:
    properties:
      account:
        type: string
      aud:
        description: the `aud` (Audience) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3
        items:
          type: string
        type: array
      exp:
        $ref: '#/definitions/jwt.NumericDate'
        description: the `exp` (Expiration Time) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4
      iat:
        $ref: '#/definitions/jwt.NumericDate'
        description: the `iat` (Issued At) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6
      id:
        type: integer
      iss:
        description: the `iss` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1
        type: string
      jti:
        description: the `jti` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7
        type: string
      nbf:
        $ref: '#/definitions/jwt.NumericDate'
        description: the `nbf` (Not Before) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5
      sub:
        description: the `sub` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2
        type: string
      username:
        type: string
    type: object
  v1.LoginUserBody:
    properties:
      account:
        type: string
      password:
        type: string
    type: object
  v1.UserBody:
    properties:
      account:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  title: Demo GO Restful API
  version: 0.0.1
paths:
  /files/:
    get:
      consumes:
      - application/json
      description: GET List Files
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.File'
            type: array
      security:
      - BearerAuth: []
      summary: List Files
      tags:
      - Upload
    post:
      consumes:
      - multipart/form-data
      description: Create Upload File
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      - description: filename
        in: formData
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Your Upload Success"}'
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create Upload File
      tags:
      - Upload
  /jwt/captcha:
    get:
      consumes:
      - application/json
      description: Captcha Jwt Token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CustomClaims'
      security:
      - BearerAuth: []
      summary: Captcha Jwt Token
      tags:
      - Jwt
  /jwt/get_token:
    post:
      consumes:
      - application/json
      description: Get Jwt Token
      parameters:
      - description: account password
        in: body
        name: LoginUserBody
        required: true
        schema:
          $ref: '#/definitions/v1.LoginUserBody'
      produces:
      - application/json
      responses:
        "200":
          description: '{"token": "token"}'
          schema:
            type: string
      summary: Get Jwt Token
      tags:
      - Jwt
  /ping:
    get:
      consumes:
      - application/json
      description: Doing Ping
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "pong"}'
          schema:
            type: string
      summary: Ping example
      tags:
      - Ping
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      description: GET User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Retrieve User
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: account password username
        in: body
        name: UserBody
        required: true
        schema:
          $ref: '#/definitions/v1.UserBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - User
  /users:
    get:
      consumes:
      - application/json
      description: GET Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerAuth: []
      summary: List User
      tags:
      - User
    post:
      consumes:
      - application/json
      description: POST User
      parameters:
      - description: account password username
        in: body
        name: UserBody
        required: true
        schema:
          $ref: '#/definitions/v1.UserBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
